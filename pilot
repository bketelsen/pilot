#!/usr/bin/env bash
# This script was generated by bashly 1.2.9 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
pilot_usage() {
  printf "pilot - CLI Helper for Intune\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  pilot COMMAND\n"
  printf "  pilot [COMMAND] --help | -h\n"
  printf "  pilot --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install Intune prerequisites\n" "$(green "intune")      "
  printf "  %s   Install Docker\n" "$(green "docker")      "
  printf "  %s   Install Incus\n" "$(green "incus")       "
  printf "  %s   Install Azure CLI\n" "$(green "azcli")       "
  printf "  %s   Install and configure XRDP for enhanced mode\n" "$(green "enhancedmode")"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
pilot_intune_usage() {
  printf "pilot intune - Install Intune prerequisites\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  pilot intune [OPTIONS]\n"
  printf "  pilot intune --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--verbose, -v")"
    printf "    Show more output\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  pilot intune\n"
    printf "  pilot intune --verbose\n"
    echo

  fi
}

# :command.usage
pilot_docker_usage() {
  printf "pilot docker - Install Docker\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  pilot docker [OPTIONS]\n"
  printf "  pilot docker --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--verbose, -v")"
    printf "    Show more output\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  pilot docker\n"
    printf "  pilot docker --verbose\n"
    echo

  fi
}

# :command.usage
pilot_test_usage() {
  if [[ -n $long_usage ]]; then
    printf "pilot test\n\n"
    printf "  Test Command\n  \n  test command2\n\n"
  else
    printf "pilot test - Test Command\n\n"
  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  pilot test [OPTIONS]\n"
  printf "  pilot test --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--verbose, -v")"
    printf "    Show more output\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  pilot test\n"
    printf "  pilot test --verbose\n"
    echo

  fi
}

# :command.usage
pilot_incus_usage() {
  printf "pilot incus - Install Incus\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  pilot incus [OPTIONS]\n"
  printf "  pilot incus --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--verbose, -v")"
    printf "    Show more output\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  pilot incus\n"
    printf "  pilot incus --verbose\n"
    echo

  fi
}

# :command.usage
pilot_azcli_usage() {
  printf "pilot azcli - Install Azure CLI\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  pilot azcli [OPTIONS]\n"
  printf "  pilot azcli --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--verbose, -v")"
    printf "    Show more output\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  pilot azcli\n"
    printf "  pilot azcli --verbose\n"
    echo

  fi
}

# :command.usage
pilot_enhancedmode_usage() {
  printf "pilot enhancedmode - Install and configure XRDP for enhanced mode\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  pilot enhancedmode [OPTIONS]\n"
  printf "  pilot enhancedmode --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--verbose, -v")"
    printf "    Show more output\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  pilot enhancedmode\n"
    printf "  pilot enhancedmode --verbose\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/azcli.sh
# install azcli on any debian family distro
debian_azcli() {
    header "Install Azure CLI" "This command will install the Azure CLI (az)."

    confirm_task "Installing AzureCLI"

    start install azcli
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    finish install azcli

    footer "Azure CLI Installed"

}

# src/lib/colors.sh

enable_auto_colors() {
  if [[ -z ${NO_COLOR+x} && ! -t 1 ]]; then
    NO_COLOR=1
  fi
}

print_in_color() {
  local color="$1"
  shift
  if [[ "${NO_COLOR:-}" == "" ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
black() { print_in_color "\e[30m" "$*"; }
white() { print_in_color "\e[37m" "$*"; }

bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }

red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
black_bold() { print_in_color "\e[1;30m" "$*"; }
white_bold() { print_in_color "\e[1;37m" "$*"; }

red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }
black_underlined() { print_in_color "\e[4;30m" "$*"; }
white_underlined() { print_in_color "\e[4;37m" "$*"; }

# src/lib/common.sh

confirm_task() {
  echo "Task: $(green "$1")"
  read -p "$(red Press Enter To Continue / Ctrl-C to Cancel)"
}

header() {
  echo "$(green "$1")"
  echo

  echo $2
  echo
}

footer() {
  echo "----"
  echo "$(green "$1")"
  echo

  echo $2
  echo
}

start() {
    verbose=${args[--verbose]}
    if [[ $verbose ]]; then
        echo "[start] $(green "$1")"
    fi
}

finish() {
    verbose=${args[--verbose]}
    if [[ $verbose ]]; then
        echo "[end] $(green "$1")"
    fi
}

require_sudo() {
  if ! [ $(id -u) = 0 ]; then
    red "This command needs to be run as root." >&2
  exit 1
fi
}

# src/lib/os.sh
filter_ubuntu() {
    . /etc/os-release
    if [[ "$ID" != "ubuntu" ]]; then
        echo "This command only works on Ubuntu"
        echo "You're running ${NAME}/${ID}"
    fi

}

filter_ubuntu2404() {

    . /etc/os-release
    if [[ "$ID" != "ubuntu" ]]; then
        echo "This command only works on Ubuntu"
        echo "You're running ${NAME}/${ID}"
    fi

    if [[ "$VERSION_ID" != "24.04" ]]; then
        echo "This command only works on Ubuntu 24.04"
        echo "You have ${NAME} version ${VERSION_ID}"
    fi

}

# returns true if $1 exists as a declared function
fn_exists() { declare -F "$1" >/dev/null; }

distro_version() {
    echo "${ID}_${VERSION_ID}_$1"
}

distro() {
    echo "${ID}_$1"
}

general() {
    echo "$1_$2"
}

# looks for ubuntu_24.04_$1, ubuntu_$1, debian_$1, returning the first it finds
install_function() {

    dv=$(distro_version $1)

    fn_exists $dv && echo $dv && return

    dis=$(distro $1)
    fn_exists $dis && echo $dis && return

    for i in $(echo $ID_LIKE | xargs); do
        generalname=$(general $i $1)
        fn_exists $generalname && echo $generalname && return
    done

    return 0

}

install() {
    myscript=$(install_function $1)

    if [[ ! -z $myscript ]]; then
        eval $myscript
    else
        echo "No installation script found for script $(green $1) on ${ID}/${VERSION_ID}, ${ID}, or other candidates (${ID_LIKE})"
    fi

}

# src/lib/test_install_script.sh
test_ubuntu() {
        echo "Ubuntu Test"
}

test_ubuntu24.04() {
        echo "Ubuntu 24.04 Test"
}

# "full" for only centos 10
centos_10_full() {
        header "Full: Centos 10" "This is the 'full' install script for centos 10"
}

# "full" for any centos
centos_full() {
        header "Full: Centos" "This is the 'full' install script for centos"
}
# "full" for any
fedora_full() {
        header "Full: Fedora" "This is the 'full' install script for fedora"
}
# "full" for any rhel
rhel_full() {
        header "Full: rhel" "This is the 'full' install script for rhel"
}

# "distro" for any centos
centos_distro() {
        header "Distro: centos" "This is the 'distro' install script for centos"
}

# "generic" for fedora
fedora_generic() {
        header "Generic: fedora" "This is the 'generic' install script for fedora"
}

# "generic" for fedora
rhel_generic() {
        header "Generic: rhel" "This is the 'generic' install script for rhel"
}

# :command.command_functions
# :command.function
pilot_intune_command() {

  # src/intune_command.sh
  header "Install Intune Packages" "This command will install Intune Portal"

  confirm_task "Updates and required packages"

  start apt update
  sudo apt update
  finish apt update

  start apt-get dist-upgrade
  sudo apt-get dist-upgrade
  finish apt-get dist-upgrade

  start required packages
  sudo apt install -y curl gpg wget
  finish required packages

  confirm_task "Adding the Microsoft package signing key"
  start get signing key
  curl -sSl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
  wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
  sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
  rm -f packages.microsoft.gpg
  finish get signing key

  confirm_task "Adding the Microsoft repositories"
  start add repositories
  curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft-ubuntu-jammy-prod.list
  sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
  sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
  finish add repositories

  start apt update
  sudo apt update
  finish apt update

  confirm_task "Installing Intune Repositories"

  start jammy repos
  sudo sh -c 'echo "deb http://us.archive.ubuntu.com/ubuntu/ jammy main restricted" > /etc/apt/sources.list.d/intune_temp.jammymain.sources.list'
  sudo sh -c 'echo "deb http://us.archive.ubuntu.com/ubuntu/ jammy updates restricted" > /etc/apt/sources.list.d/intune_temp.jammyupdates.sources.list'
  sudo sh -c 'echo "deb http://security.ubuntu.com/ubuntu jammy-security main restricted" > /etc/apt/sources.list.d/intune_temp.jammysecurity.sources.list'
  finish jammy repos

  start update and upgrade
  sudo apt update
  sudo apt upgrade
  finish update and upgrade

  confirm_task "Installing JDK"
  start install openjdk-11-jre
  sudo apt install -y openjdk-11-jre
  finish install openjdk-11-jre

  confirm_task "Installing Intune Portal"
  start apt install intune-portal microsoft-edge-stable
  sudo apt install -y intune-portal

  sudo rm /etc/apt/sources.list.d/intune_temp.*
  sudo rm /etc/apt/sources.list.d/microsoft-edge-dev.*

  finish apt install intune-portal

  start systemctl --user daemon-reload
  systemctl --user daemon-reload
  finish systemctl --user daemon-reload

  start apt update
  sudo apt update
  finish apt update

  confirm_task "Installing VSCode"

  start install code
  sudo apt install code
  finish install code

  confirm_task "Installing AzureCLI"
  start install azcli
  curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
  finish install azcli

  footer "Intune Installed" "Reboot before running Intune Portal"

}

# :command.function
pilot_docker_command() {

  # src/docker_command.sh
  header "Install Docker" "This command will install docker and configure your user permissions"

  confirm_task "Updating the system"
  start "apt update"
  sudo apt update
  finish "apt update"

  start "remove outdated packages"
  for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
  finish "remove outdated packages"

  sudo apt-get update
  sudo apt-get install ca-certificates curl
  sudo install -m 0755 -d /etc/apt/keyrings
  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc

  # Add the repository to Apt sources:
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update

  start "install docker"
  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  finish "install docker"

  start "add user to docker group"
  sudo usermod -aG docker $USER
  finish "add user to docker group"

  footer "Docker Installed" "Log out or reboot to see docker group membership or type 'newgrp docker' in the current shell."

}

# :command.function
pilot_test_command() {

  # src/test_command.sh

  install full
  install distro
  install generic
  install nope
}

# :command.function
pilot_incus_command() {

  # src/incus_command.sh
  header "Install Incus" "This command will install Incus and configure your user permissions"

  confirm_task "Updating the system"
  start "apt update"
  sudo apt update
  finish "apt update"

  sudo mkdir -p /etc/apt/keyrings/

  sudo curl -fsSL https://pkgs.zabbly.com/key.asc -o /etc/apt/keyrings/zabbly.asc

  sudo sh -c 'cat <<EOF > /etc/apt/sources.list.d/zabbly-incus-stable.sources
Enabled: yes
Types: deb
URIs: https://pkgs.zabbly.com/incus/stable
Suites: $(. /etc/os-release && echo ${VERSION_CODENAME})
Components: main
Architectures: $(dpkg --print-architecture)
Signed-By: /etc/apt/keyrings/zabbly.asc

EOF'

sudo apt-get update

sudo apt-get install -y incus
sudo usermod -aG incus-admin $USER

footer "Incus Installed" "Run 'incus admin init' to initialize your incus server."

}

# :command.function
pilot_azcli_command() {

  # src/azcli_command.sh
  install azcli
}

# :command.function
pilot_enhancedmode_command() {

  # src/enhancedmode_command.sh

  # Original Source https://github.com/Hinara/linux-vm-tools/blob/master/ubuntu/24.04/install.sh

  #
  # This script is for Ubuntu 24.04 to download and install XRDP+XORGXRDP via
  # source.
  #
  # Major thanks to: http://c-nergy.be/blog/?p=11336 for the tips.
  #

  # Use HWE kernel packages
  #
  HWE=""
  #HWE="-hwe-22.04"

  # Update our machine to the latest code if we need to.
  #

  if [ "$(id -u)" -ne 0 ]; then
      echo 'This script must be run with root privileges' >&2
      exit 1
  fi

  apt update && apt upgrade -y

  if [ -f /var/run/reboot-required ]; then
      echo "A reboot is required in order to proceed with the install." >&2
      echo "Please reboot and re-run this script to finish the install." >&2
      exit 1
  fi

  # XRDP
  #

  # Install hv_kvp utils
  apt install -y linux-tools-virtual${HWE}
  apt install -y linux-cloud-tools-virtual${HWE}

  # Install the xrdp service so we have the auto start behavior
  apt install -y xrdp

  systemctl stop xrdp
  systemctl stop xrdp-sesman

  # Configure the installed XRDP ini files.
  # use vsock transport.
  sed -i_orig -e 's/port=3389/port=vsock:\/\/-1:3389/g' /etc/xrdp/xrdp.ini
  # use rdp security.
  sed -i_orig -e 's/security_layer=negotiate/security_layer=rdp/g' /etc/xrdp/xrdp.ini
  # remove encryption validation.
  sed -i_orig -e 's/crypt_level=high/crypt_level=none/g' /etc/xrdp/xrdp.ini
  # disable bitmap compression since its local its much faster
  sed -i_orig -e 's/bitmap_compression=true/bitmap_compression=false/g' /etc/xrdp/xrdp.ini

  # Add script to setup the ubuntu session properly
  if [ ! -e /etc/xrdp/startubuntu.sh ]; then
  cat >> /etc/xrdp/startubuntu.sh << EOF
#!/bin/sh
export GNOME_SHELL_SESSION_MODE=ubuntu
export XDG_CURRENT_DESKTOP=ubuntu:GNOME
exec /etc/xrdp/startwm.sh
EOF
  chmod a+x /etc/xrdp/startubuntu.sh
  fi

  # use the script to setup the ubuntu session
  sed -i_orig -e 's/startwm/startubuntu/g' /etc/xrdp/sesman.ini

  # rename the redirected drives to 'shared-drives'
  sed -i -e 's/FuseMountName=thinclient_drives/FuseMountName=shared-drives/g' /etc/xrdp/sesman.ini

  # Changed the allowed_users
  sed -i_orig -e 's/allowed_users=console/allowed_users=anybody/g' /etc/X11/Xwrapper.config

  # Blacklist the vmw module
  if [ ! -e /etc/modprobe.d/blacklist-vmw_vsock_vmci_transport.conf ]; then
    echo "blacklist vmw_vsock_vmci_transport" > /etc/modprobe.d/blacklist-vmw_vsock_vmci_transport.conf
  fi

  #Ensure hv_sock gets loaded
  if [ ! -e /etc/modules-load.d/hv_sock.conf ]; then
    echo "hv_sock" > /etc/modules-load.d/hv_sock.conf
  fi

  # Configure the policy xrdp session
  mkdir -p /etc/polkit-1/localauthority/50-local.d/
  cat > /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla <<EOF
[Allow Colord all Users]
Identity=unix-user:*
Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile
ResultAny=no
ResultInactive=no
ResultActive=yes
EOF

  # reconfigure the service
  systemctl daemon-reload
  systemctl start xrdp

  #
  # End XRDP

  echo "Install is complete."
  echo "Reboot your machine to begin using XRDP."
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        pilot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    intune)
      action="intune"
      shift
      pilot_intune_parse_requirements "$@"
      shift $#
      ;;

    docker)
      action="docker"
      shift
      pilot_docker_parse_requirements "$@"
      shift $#
      ;;

    test)
      action="test"
      shift
      pilot_test_parse_requirements "$@"
      shift $#
      ;;

    incus)
      action="incus"
      shift
      pilot_incus_parse_requirements "$@"
      shift $#
      ;;

    azcli)
      action="azcli"
      shift
      pilot_azcli_parse_requirements "$@"
      shift $#
      ;;

    enhancedmode)
      action="enhancedmode"
      shift
      pilot_enhancedmode_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      pilot_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
pilot_intune_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        pilot_intune_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="intune"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --verbose | -v)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_ubuntu2404)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
pilot_docker_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        pilot_docker_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="docker"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --verbose | -v)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_ubuntu)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
pilot_test_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        pilot_test_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="test"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --verbose | -v)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
pilot_incus_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        pilot_incus_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="incus"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --verbose | -v)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_ubuntu2404)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
pilot_azcli_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        pilot_azcli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="azcli"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --verbose | -v)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_ubuntu2404)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
pilot_enhancedmode_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        pilot_enhancedmode_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="enhancedmode"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --verbose | -v)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_ubuntu2404)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.user_hooks
before_hook() {
  # src/before.sh
  # pull in os/distro variables
  . /etc/os-release
}

# :command.initialize
initialize() {
  declare -g version="0.0.1"
  set -e

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "intune") pilot_intune_command ;;
    "docker") pilot_docker_command ;;
    "test") pilot_test_command ;;
    "incus") pilot_incus_command ;;
    "azcli") pilot_azcli_command ;;
    "enhancedmode") pilot_enhancedmode_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
